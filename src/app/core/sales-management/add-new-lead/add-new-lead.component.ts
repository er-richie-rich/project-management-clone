import {Component, OnDestroy, OnInit} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {PMApiServicesService} from "../../../../services/PMApiServices.service";
import {Subscription} from "rxjs";
import swal from "sweetalert2";
import {ActivatedRoute, Router} from "@angular/router";
import {DatePipe, Location} from "@angular/common";
import {CustomValidators} from "ng2-validation";
import {MatSelectChange} from "@angular/material/select";
import {MatOption} from "@angular/material/core";
import { noWhitespaceValidation, PMHelperService} from "../../../../services/PMHelper.service";

@Component({
  selector: 'app-add-new-lead',
  templateUrl: './add-new-lead.component.html',
  styleUrls: ['./add-new-lead.component.scss']
})
export class AddNewLeadComponent implements OnInit, OnDestroy {
  title: any = "Add";
  addNewLeadForm: any = FormGroup;
  submitted: any = false;
  output: any;
  api!: Subscription;
  salesPerson: any;
  leadGeneratedBy: any;
  leadStatus: any;
  _leadsData: any;
  myDate: any;
  newDate: any;
  leadBy: any;
  optionValue: any;
  lead_generated_by: any;
  leadSource: any;
  selectedStatus: any;
  roleName = "";
  authUser: any = {};


  constructor(
    private fb: FormBuilder,
    private apiService: PMApiServicesService,
    public activatedRoute: ActivatedRoute,
    private router: Router,
    public helper : PMHelperService,
  ) {
    let authUser: any = localStorage.getItem('loggedInUser');
    if (authUser) {
      this.authUser = JSON.parse(authUser);
      this.roleName = this.authUser.roleKey
    }
  }

  get addNewLeadFormControl() {
    return this.addNewLeadForm.controls;
  }

  ngOnInit(): void {
    const leadId: any = this.activatedRoute.snapshot.paramMap.get('id');
    this.addNewLeadForm = this.fb.group({
      leadId: [''],
      leadSource: ['',noWhitespaceValidation.noWhitespaceValidator],
      leadGeneratedBy: ['',[Validators.required,noWhitespaceValidation.noWhitespaceValidator]],
      other: [''],
      clientPhoneNumber: [''],
      additionalNotes: [''],
      linkedinProfileUrl: [''],
      leadTitle: ['', Validators.required],
      leadGenerationDate: [''],
      leadType: ['', Validators.required],
      // reviewedBy: ['', Validators.required],
      managedBy: ['', Validators.required],
      leadStatus: ['', Validators.required],
      clientName: ['', Validators.required],
      email: ['', Validators.compose([Validators.required, Validators.email, Validators.maxLength(50), Validators.pattern('^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([A-Za-z]{2,6}(?:\\.[A-Za-z]{2,6})?)$'),])],
      clientCountry: ['', Validators.required],

    })
    if (leadId != 0) {
      this.title = "Edit";
      this.apiService.viewSalesLeads({leadId: leadId}).subscribe(
        data => {
          if (data && data?.meta && data.meta.status == 1) {
            let leadsData = data.data;
            this._leadsData = data.data;
            this.myDate = new DatePipe('en-US').transform(this._leadsData.leadGenerationDate, 'shortDate');
            this.newDate = new Date(this.myDate);
            this.leadSource = leadsData.leadSource;
            this.addNewLeadForm.patchValue({
              leadId: leadId,
              leadTitle: leadsData.leadTitle,
              leadGenerationDate: this.newDate,
              leadType: leadsData.leadType,
              leadSource: leadsData.leadSource,
              leadGeneratedBy: leadsData.leadGeneratedBy,
              linkedinProfileUrl: leadsData.linkedinProfileUrl,
              managedBy: leadsData.managedBy,
              leadStatus: leadsData.leadStatus,
              clientName: leadsData.clientName,
              email: leadsData.email,
              clientCountry: leadsData.clientCountry,
              clientPhoneNumber: leadsData.clientPhoneNumber,
              additionalNotes: leadsData.additionalNotes,
              other: leadsData.other,
              // isHotLead: leadsData.isHotLead
            });
          }
        },
        error => {
          swal.fire('Error!', error.error.message, 'info').then();
        },
        () => {
        }
      )
    } else {
      if (this.roleName === 'BUSINESSDEVELOPMENTEXECUTIVE'){
        this.addNewLeadForm.patchValue({
          leadGeneratedBy: this.authUser._id,
        });
      }
    }
    this.getSalesPerson({})
    // Lead Generated By List
    this.api = this.apiService.salesLeadGeneratedBy({}).subscribe(
      data => {
        if (data && data?.meta && data.meta.status == 1) {
          this.lead_generated_by = data.data;
        }
      }
    )
    // Lead Generated By List
  }

  ngOnDestroy(): void {
    this.api.unsubscribe()
  }
  changeSource = () => {
    this.addNewLeadForm.patchValue({
      leadSource: '',
    });
  }
  onSubmit = (data: any) => {
    if (this.optionValue === 'Inbound'){
      this.addNewLeadForm.controls.leadGeneratedBy.setErrors(null)
    }
    if (this.leadSource != 'Others'){
      this.addNewLeadForm.controls.other.setErrors(null)
    }
    this.submitted = true;
    if (this.addNewLeadForm.valid) {
      this.helper.toggleLoaderVisibility(true)
    this.api = this.apiService.editSalesLeads(this.addNewLeadForm.value).subscribe(data => {
        if (data.meta.status === 1){
          this.setIsClicked()
          this.router.navigate(['/sales-management']).then();
          swal.fire('', data.meta.message, 'success');
        } else {
          swal.fire('Info!', data.meta.message, 'info');
        }
      this.helper.toggleLoaderVisibility(false)
      }, (err) => {
      this.helper.toggleLoaderVisibility(false)
        swal.fire('Error!', err.error.message, 'error');
      });
  }
  }
  getSalesPerson = (data: any) => {
    this.api = this.apiService.salesPerson(data).subscribe(
      data => {
        if (data && data?.meta && data.meta.status == 1) {
          this.salesPerson = data.data;
        }
      }
    )
  }

  // change = () =>{
  //   this.addNewLeadForm.controls['leadSource'].setValue(null);
  // }

  backToLead = () => {
    this.setIsClicked()
    this.router.navigate(['/sales-management']).then();
  }

  setIsClicked(){
    localStorage.setItem('isClicked',JSON.stringify(true))
  }

  keyPress(event: any) {
    const pattern = /[0-9\+\-\ ]/;
    let inputChar = String.fromCharCode(event.charCode);
    if (event.keyCode != 8 && !pattern.test(inputChar)) {
      event.preventDefault();
    }
  }

  space(event:any) {
    if (event.target.selectionStart === 0 && event.code === 'Space'){
      event.preventDefault();
    }
  }
}

